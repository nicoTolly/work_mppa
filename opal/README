Contents
========

- src_mono : OPAL implemented in sequential multi-dimensional array C99
- src_ppcg : OPAL modified to be more polyhedral-friendly

To compile
==========

$ make opal_mono
$ make opal_ppcg

CPU executable files are put in ./test
$ ll ./test

To run
======

$ ./test/opal_mono config.json.cpu.ppcg  should have something like this : 
OpenCL Processor Array LBM solver version 0.2

Domain: 128x128x128
Workgroups: 32x1x1
Time steps: 1000
Sampling period: 100
Reynolds number: 1000
Imposed velocity: 0.4
Convergence threshold: 1e-05

 0         0.0000000
 100       0.0409659
 200       0.0153422
 300       0.0117104
 400       0.0104958
 500       0.0109120
 600       0.0093567
 700       0.0095259
 800       0.0084783
 900       0.0086074
 1000      0.0000733

Runtime: 168.401 s
Performance: 12.4533 MLUPS

$ ./test/opal_ppcg_CPU confiig.json.cpu.ppcg 
OpenCL Processor Array LBM solver version 0.2

Domain: 128x128x128
Workgroups: 32x1x1
Time steps: 1000
Sampling period: 100
Reynolds number: 1000
Imposed velocity: 0.4
Convergence threshold: 1e-05

 0         0.0000000
 100       0.0409659
 200       0.0153422
 300       0.0117104
 400       0.0104958
 500       0.0109120
 600       0.0093567
 700       0.0095259
 800       0.0084783
 900       0.0086074
 1000      0.0073026

Runtime: 163.079 s
Performance: 12.8598 MLUPS

- Some bitmap images are also generated illustrating LDC example
- In src_ppcg/, instead of main.c, one can change to use main.ppcg.c, the code 
generated by PPCG with target=c. Try it then compare with default version. 
- Some attemps generating OpenCL code were done in src_ppcg/ppcg_S_* with --tile-size option

